#!/usr/bin/env python

#from matplotlib import pyplot as plt
import sys
import ase
#from ase.io import read
import numpy as np
#from ase.thermochemistry import HarmonicThermo,IdealGasThermo
#from turbomole_python import tm_get_gibbs_from_fil
import os
from ase.io import *

pp='/home/tiago.ferreiragoncal/VASP/PP/potpaw_PBE.54/'  #This path has to point to the location of the pseudopotentials/PAWs
atoms=ase.io.read("POSCAR")
os.system("cat ACF.dat | awk '{print $5}'>baderchargecolumn.txt") #ACF.dat is a file generated by the bader binary file (needs to be installed http://theory.cm.utexas.edu/henkelman/code/bader/)
i=0
f=open("CHARGE_ANALYSIS.txt","w")
f.write("index(from POSCAR)"+"\t"+"Chemical symbol"+"\t"+"\t"+"Z"+"\t"+"frozen"+"\t"+"valence"+"\t"+"Bader_valence"+"\t"+"Bader_charge (z-frozen-Bader_valence)"+"\n")

for a in atoms.get_chemical_symbols():
  j=0
  g=open("baderchargecolumn.txt","r")
  for b in g:
    try:
      c1=float(b)
      #print c1, i, j
      if j>=i:
        break
      else:
        j+=1
    except ValueError:
      pass
  g.close()
  h=open(pp+a+"/POTCAR","r")
  count=0
  z=0
  for c in h:
    for d in c.split(";"):
      kappa=5
      if "ZVAL" in d.split(" "):
        while True:
          try:
            valence=float(d.split(" ")[kappa])
            break
          except ValueError:
            kappa+=1
      if count==1:
        try:
          z+=float(d.split(" ")[-1])
        except ValueError:
          count=0
      #print d.split(" ")
      if "occ.\n" in d.split(" "):
        count=1
      
  #print c1, "index:", i
  #print z
  frozen=z-valence
  c=z-frozen-c1
  #print c
  f.write(str(i)+3*"\t"+a+3*"\t"+str(z)+"\t"+str(frozen)+"\t"+str(valence)+"\t"+str(c1)+3*"\t"+str(c)+"\n")
  i+=1
  #print atoms.get_positions()
  #print atoms.get_atomic_numbers()
  #print atoms.get_initial_charges()
  #print atoms.get_chemical_symbols()
  #os.system("cat ACF.dat | awk '{print $5}'")
